/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UIDesign;

import Model.City;
import Model.Community;
import Model.Encounter;
import Model.House;
import Model.Patient;
import Model.PatientDirectory;
import Model.PersonDirectory;
import Model.SystemPeople;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vachanabelgavi
 */
public class ViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewJPanel
     */
    PersonDirectory person;
    PatientDirectory patient;
    House house;
    Community community;
    City city;
    SystemPeople system;
    
    DefaultTableModel model, search;

    
    public ViewJPanel(PatientDirectory patient, PersonDirectory person, House house, Community community, City city, SystemPeople system) {
        initComponents();
        
        this.person = person;
        this.patient = patient;
        this.house = house;
        this.community = community;
        this.city = city;
        this.system = system;
        
        tableView();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableView = new javax.swing.JTable();
        lblSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtSearchAge = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(700, 600));
        setMinimumSize(new java.awt.Dimension(700, 600));
        setPreferredSize(new java.awt.Dimension(700, 600));

        tableView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Person Name", "Age", "House", "Street", "Zip Code"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableView.setSelectionBackground(new java.awt.Color(54, 33, 89));
        jScrollPane1.setViewportView(tableView);

        lblSearch.setText("Search By Patient");

        btnSearch.setBackground(new java.awt.Color(54, 33, 89));
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ImagesFolder/search-20.png"))); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel1.setText("Name");

        jLabel2.setText("Age");

        jPanel1.setBackground(new java.awt.Color(54, 33, 89));

        jLabel3.setBackground(new java.awt.Color(54, 33, 89));
        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("View Details");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vital Sign", "Value", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(lblSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 558, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearchAge, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(jLabel2)
                    .addComponent(txtSearchAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        search = (DefaultTableModel) jTable1.getModel();
        search.setRowCount(0);
        
        boolean found = false;
        
        String searchPatient = txtSearch.getText();
        int ageSearch = Integer.parseInt(txtSearchAge.getText());
        
        if(searchPatient.equals("") || searchPatient.isEmpty() || ageSearch==0){
            JOptionPane.showMessageDialog(null, "Enter data in Search field.");
        }
        else{
            System.out.println("\n\nCity-community size " + city.getCommunityList().size());
            System.out.println("community name " + community.getName());
            for(Community c : city.getCommunityList()){
                System.out.println("community name " + c.getName());
                
                System.out.println("Community-House size " + c.getHouseList().size());
                for(int i=0; i < c.getHouseList().size(); i++){
                    
                    System.out.println("Community-House-patient size " + c.getHouseList().get(i).getPatientList().size());
                    for(int j=0; j < c.getHouseList().get(i).getPatientList().size(); j++){
                        
                        System.out.println("Community-House-patient-encounter size " + c.getHouseList().get(i).getPatientList().get(j).getEncounters().size());
                        
                        System.out.println("search from box " + searchPatient);
                        System.out.println("search from list " + c.getHouseList().get(i).getPatientList().get(j).getName());
                        
                        System.out.println("age from search " + ageSearch);
                        System.out.println("age from list " + c.getHouseList().get(i).getPatientList().get(j).getAge());
                        
                        if(c.getHouseList().get(i).getPatientList().get(j).getName().equalsIgnoreCase(searchPatient) && 
                                c.getHouseList().get(i).getPatientList().get(j).getAge()==ageSearch){
                            
                            System.out.println("Community-House-patient-encounter size " + c.getHouseList().get(i).getPatientList().get(j).getEncounters().size());
                        
                            for(int k=0; k < c.getHouseList().get(i).getPatientList().get(j).getEncounters().size(); k++){
                                
                                Object[] list1 = new Object[3];
                                
                                System.out.println("Vital sign name "+c.getHouseList().get(i).getPatientList().get(j).getEncounters().get(k).getVitalSign().getName());
                                
                                list1[0] = c.getHouseList().get(i).getPatientList().get(j).getEncounters().get(k).getVitalSign().getName();
                                list1[1] = c.getHouseList().get(i).getPatientList().get(j).getEncounters().get(k).getVitalSign().getValue();
                                list1[2] = c.getHouseList().get(i).getPatientList().get(j).getEncounters().get(k).getDate();
                                
                                System.out.println(list1[0]);
                                System.out.println(list1[1]);
                                System.out.println(list1[2]);
                                
                                search.addRow(list1);
                                found = true;

                            }
                        }
                    }
                }
            }
        }
        if(!found){
                JOptionPane.showMessageDialog(null, "Not Found!");
            }
        
    }//GEN-LAST:event_btnSearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JTable tableView;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSearchAge;
    // End of variables declaration//GEN-END:variables

    public void tableView(){
        
        model = (DefaultTableModel) tableView.getModel();
        model.setRowCount(0);
        
        Object[] list = new Object[5];
        
        System.out.println("comm list "+city.getCommunityList().size());


        for(Community c : city.getCommunityList()){
                    System.out.println("view name "+c.getName());

        System.out.println("hosuing list size "+c.getHouseList().size());
            
            for(int i=0; i < c.getHouseList().size(); i++){
                
                list[2] = c.getHouseList().get(i).getHouseNumber();
                list[3] = c.getHouseList().get(i).getStreetName();
                list[4] = c.getHouseList().get(i).getZipCode();
                
                System.out.println("person list size "+c.getHouseList().get(i).getPersonList().size());

                
                for(int j=0; j < c.getHouseList().get(i).getPersonList().size(); j++){
                    list[0] = c.getHouseList().get(i).getPersonList().get(j).getName();
                    list[1] = c.getHouseList().get(i).getPersonList().get(j).getAge();
                    
                    model.addRow(list);
                }
            } 
        }
    }
}
