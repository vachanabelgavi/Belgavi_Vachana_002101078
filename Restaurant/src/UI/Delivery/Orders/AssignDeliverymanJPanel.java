/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.Delivery.Orders;

import Model.Deliveryman;
import Model.EcoSystem;
import Model.Orders;
import Model.UserAccount.UserAccount;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vachanabelgavi
 */
public class AssignDeliverymanJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AssignDeliverymanJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private ArrayList<Orders> cartList;
    
    public AssignDeliverymanJPanel(JPanel userProcessContainer, UserAccount userAccount, EcoSystem business) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        this.userAccount = userAccount;
        
        cartList = new ArrayList<Orders>();
        populateOrdersTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableOrders = new javax.swing.JTable();
        btnAddOrders = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableDelivery = new javax.swing.JTable();
        btnDeliver = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        tableOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order Number", "Restaurant", "Customer", "Total Price", "Order Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableOrders.setSelectionBackground(new java.awt.Color(54, 33, 89));
        jScrollPane1.setViewportView(tableOrders);

        btnAddOrders.setBackground(new java.awt.Color(54, 33, 89));
        btnAddOrders.setForeground(new java.awt.Color(255, 255, 255));
        btnAddOrders.setText("Pick Order");
        btnAddOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddOrdersActionPerformed(evt);
            }
        });

        tableDelivery.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order Number", "Restaurant", "Customer", "Total Price", "Order Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDelivery.setSelectionBackground(new java.awt.Color(54, 33, 89));
        jScrollPane2.setViewportView(tableDelivery);

        btnDeliver.setBackground(new java.awt.Color(54, 33, 89));
        btnDeliver.setForeground(new java.awt.Color(255, 255, 255));
        btnDeliver.setText("Deliver Order");
        btnDeliver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeliverActionPerformed(evt);
            }
        });

        btnRefresh.setBackground(new java.awt.Color(54, 33, 89));
        btnRefresh.setForeground(new java.awt.Color(255, 255, 255));
        btnRefresh.setText("Refresh Tables");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(54, 33, 89));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("List of Orders");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnRefresh)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDeliver))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddOrders)
                        .addGap(200, 200, 200)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAddOrders)
                .addGap(38, 38, 38)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeliver)
                    .addComponent(btnRefresh))
                .addContainerGap(24, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddOrdersActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = tableOrders.getSelectedRow();
        if(selectedRow >= 0) {
            Orders rest = (Orders)tableOrders.getValueAt(selectedRow,0);
            if(rest.getOrderStatus().equalsIgnoreCase("Order Ready")){
                cartList.add(rest);
            }
            populateCartTable();
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select a row to add the Dishes to the Cart.");
        }
    }//GEN-LAST:event_btnAddOrdersActionPerformed

    private void btnDeliverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeliverActionPerformed
        // TODO add your handling code here:
        int row = tableDelivery.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        JOptionPane.showMessageDialog(null, "Order Delivered");
        
        DefaultTableModel menuModel = (DefaultTableModel) tableOrders.getModel();
        
        int selectedRow = tableOrders.getSelectedRow();
        
        menuModel.setValueAt("Order Delivered", selectedRow, 4);
        
        Orders ord = (Orders) tableOrders.getValueAt(selectedRow, 0);
        //Deliveryman man = business.getDeliverymanDirectory().addDeliveryPerson();
        for(int i=0; i < business.getOrdersList().getOrdersList().size(); i++){
            if(ord.getOrderNumber() == business.getOrdersList().getOrdersList().get(i).getOrderNumber()){
                ord.setOrderStatus("Order Delivered");
            }
        }
        System.out.println(ord.getOrderStatus());
        
        /*
        DeliveryStatusJPanel status = new DeliveryStatusJPanel(userProcessContainer, business);
        userProcessContainer.add("Delivery Status",status);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        */
    }//GEN-LAST:event_btnDeliverActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        populateOrdersTable();
        
        int rowCount = tableDelivery.getRowCount();
        DefaultTableModel model = (DefaultTableModel) tableDelivery.getModel();
        
        for(int i = rowCount-1; i >= 0; i--){
            model.removeRow(i);
        }
    }//GEN-LAST:event_btnRefreshActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddOrders;
    private javax.swing.JButton btnDeliver;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableDelivery;
    private javax.swing.JTable tableOrders;
    // End of variables declaration//GEN-END:variables

    public void populateOrdersTable(){
        
        DefaultTableModel menuModel = (DefaultTableModel) tableOrders.getModel();
        menuModel.setRowCount(0);
       // Restaurant restaurant = ecosystem.getRestaurantDirectory().getRestaurant(userAccount.getUsername());
        for (Orders order : business.getOrdersList().getOrdersList()) {
            Object[] row = new Object[5];
            row[0] = order;
            row[1] = order.getRestaurant().getName();
            row[2] = order.getCustomer().getName();
            row[3] = order.getTotalPrice();
            row[4] = order.getOrderStatus();
            
            menuModel.addRow(row);
        }
    }
    
    public void populateCartTable(){
        
        DefaultTableModel cartModel = (DefaultTableModel) tableDelivery.getModel();
        cartModel.setRowCount(0);
        for (Orders o : cartList) {
            Object[] row = new Object[5];
            row[0] = o;
            row[1] = o.getRestaurant().getName();
            row[2] = o.getCustomer().getName();
            row[3] = o.getTotalPrice();
            row[4] = o.getOrderStatus();
            
            cartModel.addRow(row);
            
        }
        
    }
    
}
