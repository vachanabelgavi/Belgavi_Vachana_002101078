/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ModelUI;

import ModelArray.Car;
import ModelArray.CarsList;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import java.time.ZoneId;

/**
 *
 * @author vachanabelgavi
 */
public class ViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewJPanel
     */
    CarsList cars;
    Car selectedCar;
    //Vector model;
    DefaultTableModel modelTable = new DefaultTableModel();
    DefaultTableModel search = new DefaultTableModel();
    DateFormat df = new SimpleDateFormat("MMM dd, YYYY");
    
    String selectedItem;
    
    public ViewJPanel(CarsList cars) {
        initComponents();
        
        this.cars = cars;
        
        displayCars();
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePopulate = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableSearch = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        btnView = new javax.swing.JButton();
        txtCity = new javax.swing.JTextField();
        lblSeats = new javax.swing.JLabel();
        lblCertificate = new javax.swing.JLabel();
        lblAvailability = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        txtSerialNumber = new javax.swing.JTextField();
        txtModel = new javax.swing.JTextField();
        lblSerialNumber = new javax.swing.JLabel();
        txtBrand = new javax.swing.JTextField();
        lblModel = new javax.swing.JLabel();
        txtYear = new javax.swing.JTextField();
        lblBrand = new javax.swing.JLabel();
        lblYear = new javax.swing.JLabel();
        txtSeats = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        btnFirstAvailable = new javax.swing.JButton();
        btnAvailNotAvail = new javax.swing.JButton();
        btnMinSeats = new javax.swing.JButton();
        btnRecentUpdate = new javax.swing.JButton();
        btnExpiryCars = new javax.swing.JButton();
        RadioYes = new javax.swing.JRadioButton();
        RadioNo = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        comboSearch = new javax.swing.JComboBox<>();
        dateExpiry = new com.toedter.calendar.JDateChooser();
        dateDateSaved = new com.toedter.calendar.JDateChooser();
        btnSeatsLessMore = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(900, 800));
        setMinimumSize(new java.awt.Dimension(900, 800));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("View Car");

        tablePopulate.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Serial Number", "Brand", "Model", "Year of Manufacture", "Seats", "Availability", "City", "Maintenance Expiry"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePopulate.setMaximumSize(new java.awt.Dimension(525, 160));
        tablePopulate.setMinimumSize(new java.awt.Dimension(525, 160));
        jScrollPane1.setViewportView(tablePopulate);

        tableSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial Number", "Brand", "Model", "Year of Manufacture", "Seats", "Availability", "City", "Maintenance Expiry"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableSearch.setMaximumSize(new java.awt.Dimension(525, 0));
        tableSearch.setMinimumSize(new java.awt.Dimension(525, 0));
        jScrollPane2.setViewportView(tableSearch);

        txtSearch.setMaximumSize(new java.awt.Dimension(11, 26));
        txtSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtSearchMouseClicked(evt);
            }
        });
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        lblSeats.setText("Number of Seats");

        lblCertificate.setText("Maintenance Certificate Expiry");

        lblAvailability.setText("Availability");

        lblDate.setText("Date");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        txtSerialNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSerialNumberActionPerformed(evt);
            }
        });

        txtModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModelActionPerformed(evt);
            }
        });

        lblSerialNumber.setText("Car Serial Number");

        lblModel.setText("Car Model");

        lblBrand.setText("Car Brand");

        lblYear.setText("Year of Manufacture");

        lblCity.setText("City");

        btnFirstAvailable.setText("First available car");
        btnFirstAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstAvailableActionPerformed(evt);
            }
        });

        btnAvailNotAvail.setText("Number of cars available and not available");
        btnAvailNotAvail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAvailNotAvailActionPerformed(evt);
            }
        });

        btnMinSeats.setText("Car with minimum no. of seats");
        btnMinSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinSeatsActionPerformed(evt);
            }
        });

        btnRecentUpdate.setText("Most recent catalog update");
        btnRecentUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecentUpdateActionPerformed(evt);
            }
        });

        btnExpiryCars.setText("Maintenance certificate expired cars");
        btnExpiryCars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpiryCarsActionPerformed(evt);
            }
        });

        RadioYes.setText("Yes");
        RadioYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioYesActionPerformed(evt);
            }
        });

        RadioNo.setText("No");
        RadioNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioNoActionPerformed(evt);
            }
        });

        jLabel2.setText("Search");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        comboSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Serial Number", "Brand", "Model", "Year of Manufacture", "Number of Seats", "City" }));
        comboSearch.setMaximumSize(new java.awt.Dimension(182, 27));
        comboSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSearchActionPerformed(evt);
            }
        });

        btnSeatsLessMore.setText("Seats more than 3 less than 8");
        btnSeatsLessMore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeatsLessMoreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(comboSearch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSearch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnView))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblYear)
                            .addComponent(lblSerialNumber)
                            .addComponent(lblModel)
                            .addComponent(lblBrand)
                            .addComponent(lblCity)
                            .addComponent(lblSeats)
                            .addComponent(lblCertificate)
                            .addComponent(lblAvailability)
                            .addComponent(lblDate))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(RadioYes)
                                .addGap(18, 18, 18)
                                .addComponent(RadioNo)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(dateDateSaved, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dateExpiry, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtSeats, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(txtCity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(txtYear, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(txtBrand, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(txtModel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(txtSerialNumber, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnExpiryCars, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                                    .addComponent(btnFirstAvailable, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                                    .addComponent(btnRecentUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                                    .addComponent(btnMinSeats, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                                    .addComponent(btnAvailNotAvail, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnSeatsLessMore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(49, 49, 49)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(205, 205, 205)
                .addComponent(btnUpdate)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAvailNotAvail, btnExpiryCars, btnFirstAvailable, btnMinSeats, btnRecentUpdate});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnView)
                    .addComponent(jLabel2)
                    .addComponent(btnSearch)
                    .addComponent(comboSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSerialNumber)
                    .addComponent(txtSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFirstAvailable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblModel)
                    .addComponent(txtModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAvailNotAvail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBrand)
                    .addComponent(txtBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMinSeats))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblYear)
                    .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRecentUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExpiryCars))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSeats)
                    .addComponent(txtSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSeatsLessMore))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCertificate)
                    .addComponent(dateExpiry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RadioNo, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblAvailability)
                        .addComponent(RadioYes)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDate)
                    .addComponent(dateDateSaved, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnUpdate)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAvailNotAvail, btnExpiryCars, btnFirstAvailable, btnMinSeats, btnRecentUpdate});

    }// </editor-fold>//GEN-END:initComponents

    //model = (Vector)((DefaultTableModel)tablePopulate.getModel()).getVector().clone();
    
    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        
        int selectedRowIndex = tablePopulate.getSelectedRow();
        
        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }

        modelTable = (DefaultTableModel) tablePopulate.getModel();
        selectedCar = (Car) modelTable.getValueAt(selectedRowIndex, 0);
        
        System.out.println(selectedCar.getAvailability() + " " + selectedCar.getModel());
        
        txtSerialNumber.setText(selectedCar.getSerialNumber());
        txtBrand.setText(selectedCar.getBrand());
        txtModel.setText(selectedCar.getModel());
        txtYear.setText(String.valueOf(selectedCar.getYearOfManufacture()));
        txtSeats.setText(String.valueOf(selectedCar.getNumberOfSeats()));
        txtCity.setText(selectedCar.getCity());
        dateExpiry.setDate(selectedCar.getMaintenanceExpiry());
        dateDateSaved.setDate(selectedCar.getDate());
        //txtAvailability.setText(selectedCar.getAvailability());
        
        if(selectedCar.getAvailability() != "Yes")
            RadioNo.setSelected(true);
        else
            RadioYes.setSelected(true);

    }//GEN-LAST:event_btnViewActionPerformed


    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

        modelTable = (DefaultTableModel) tablePopulate.getModel();
        
      // Car car = cars.addCar();
        //System.out.println("After Car car = cars.addCar()");
        
        System.out.println("Selected Car brand in update " +selectedCar.getBrand());
        String serialNumber = txtSerialNumber.getText();
        String model = txtModel.getText();
        String brand = txtBrand.getText();
        int yearOfManufacture = Integer.parseInt(txtYear.getText());
        int numberOfSeats = Integer.parseInt(txtSeats.getText());
        String city = txtCity.getText();
        Date maintenanceExpiry = dateExpiry.getDate();
        Date date = dateDateSaved.getDate();

        
        String availability = selectedCar.availability;
                   System.out.println(availability);

        if(RadioYes.isSelected())
            availability = "Yes";
       
        if(RadioNo.isSelected())
            availability = "No";
        
        selectedCar.setSerialNumber(serialNumber);
        selectedCar.setModel(model);
        selectedCar.setBrand(brand);
        selectedCar.setYearOfManufacture(yearOfManufacture);
        selectedCar.setNumberOfSeats(numberOfSeats);
        selectedCar.setCity(city);
        selectedCar.setMaintenanceExpiry(maintenanceExpiry);
        selectedCar.setDate(date);
        selectedCar.setAvailability(availability);
        

        
        
        //displayCars();
        
        int i = tablePopulate.getSelectedRow();
        if(i >= 0){
            modelTable.setValueAt(selectedCar, i, 0);
            modelTable.setValueAt(brand, i, 1);
            modelTable.setValueAt(model, i, 2);
            modelTable.setValueAt(yearOfManufacture, i, 3);
            modelTable.setValueAt(numberOfSeats, i, 4);              
            modelTable.setValueAt(availability, i, 5);
            modelTable.setValueAt(city, i, 6);
            modelTable.setValueAt(maintenanceExpiry, i, 7);
        }
        else {
            System.out.println("Update error.");
        }
        
        JOptionPane.showMessageDialog(this, "Car Updated.");
        
        txtSerialNumber.setText("");
        txtModel.setText("");
        txtBrand.setText("");
        txtYear.setText("");
        txtSeats.setText("");
        txtCity.setText("");
        dateExpiry.setDate(null);
        dateDateSaved.setDate(null);
        RadioYes.setSelected(false);
        RadioNo.setSelected(false);
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModelActionPerformed

    private void RadioYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioYesActionPerformed
        // TODO add your handling code here:
        if(RadioYes.isSelected())
            RadioNo.setSelected(false); 
    }//GEN-LAST:event_RadioYesActionPerformed

    private void RadioNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioNoActionPerformed
        // TODO add your handling code here:
        if(RadioNo.isSelected())
            RadioYes.setSelected(false);
    }//GEN-LAST:event_RadioNoActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // TODO add your handling code here:        
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        search = (DefaultTableModel) tableSearch.getModel();
        search.setRowCount(0);
        
        ArrayList<String> array = new ArrayList<String>();
        
        if(txtSearch.getText()==null || txtSearch.getText().length()==0){
            JOptionPane.showMessageDialog(null, "Enter data in search field");    
        }
        
        switch(selectedItem){
            case "Serial Number" : 
                if(selectedItem.toLowerCase().equals("serial number")){
                System.out.println(selectedItem);
                    for(Car car : cars.getCars()){
                        if(car.getSerialNumber().equals(txtSearch.getText())){
                            System.out.println(txtSearch.getText());
                            Object[] list = new Object[8];
                            list[0] = car;
                            list[1] = car.getBrand();
                            list[2] = car.getModel();
                            list[3] = car.getYearOfManufacture();
                            list[4] = car.getNumberOfSeats();
                            list[5] = car.getAvailability();
                            list[6] = car.getCity();
                            list[7] = car.getMaintenanceExpiry();

                            search.addRow(list);
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Not found");
                        }
                    }
                }
                break;
                
            case "Brand": 
                if(selectedItem.toLowerCase().equals("brand")){
                System.out.println(selectedItem);
                    for(Car car : cars.getCars()){
                        if(car.getBrand().equals(txtSearch.getText())){
                            System.out.println(txtSearch.getText());
                            Object[] list = new Object[8];
                            list[0] = car;
                            list[1] = car.getBrand();
                            list[2] = car.getModel();
                            list[3] = car.getYearOfManufacture();
                            list[4] = car.getNumberOfSeats();
                            list[5] = car.getAvailability();
                            list[6] = car.getCity();
                            list[7] = car.getMaintenanceExpiry();

                            search.addRow(list);
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Not found");
                        }
                    }
                }
                break;
                
            case "Model": 
                if(selectedItem.toLowerCase().equals("model")){
                System.out.println(selectedItem);
                    for(Car car : cars.getCars()){
                        if(car.getModel().equals(txtSearch.getText())){
                            System.out.println(txtSearch.getText());
                            Object[] list = new Object[8];
                            list[0] = car;
                            list[1] = car.getBrand();
                            list[2] = car.getModel();
                            list[3] = car.getYearOfManufacture();
                            list[4] = car.getNumberOfSeats();
                            list[5] = car.getAvailability();
                            list[6] = car.getCity();
                            list[7] = car.getMaintenanceExpiry();

                            search.addRow(list);
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Not found");
                        }
                    }
                }
                break;
            
            case "Year of Manufacture": 
                boolean yearFound = false;
                if(selectedItem.toLowerCase().equals("year of manufacture")){
                System.out.println("Year of manufacture " + selectedItem);
                    for(Car car : cars.getCars()){
                        int yearM = Integer.parseInt(txtSearch.getText());
                System.out.println("Year "+yearM);
                        if(car.getYearOfManufacture() == yearM){
                            System.out.println(car.getYearOfManufacture());
                            Object[] list = new Object[8];
                            list[0] = car;
                            list[1] = car.getBrand();
                            list[2] = car.getModel();
                            list[3] = car.getYearOfManufacture();
                            list[4] = car.getNumberOfSeats();
                            list[5] = car.getAvailability();
                            list[6] = car.getCity();
                            list[7] = car.getMaintenanceExpiry();

                            search.addRow(list);
                            yearFound = true;
                        }
                        
                    }
                    
                    if(!yearFound) {
                      JOptionPane.showMessageDialog(null, "Not found");

                    }
                }
                    break;
            
            case "Number of Seats": 
                boolean seatFound = false;
                if(selectedItem.toLowerCase().equals("number of seats")){
                System.out.println(selectedItem);
                    for(Car car : cars.getCars()){
                        if(car.getNumberOfSeats() == Integer.parseInt(txtSearch.getText())){
                            System.out.println(txtSearch.getText());
                            Object[] list = new Object[8];
                            list[0] = car;
                            list[1] = car.getBrand();
                            list[2] = car.getModel();
                            list[3] = car.getYearOfManufacture();
                            list[4] = car.getNumberOfSeats();
                            list[5] = car.getAvailability();
                            list[6] = car.getCity();
                            list[7] = car.getMaintenanceExpiry();

                            search.addRow(list);
                            seatFound = true;
                        }
                    }
                    if(!seatFound) {
                      JOptionPane.showMessageDialog(null, "Not found");

                    }
                }
            break;
            
            case "City": 
                if(selectedItem.toLowerCase().equals("city")){
                System.out.println(selectedItem);
                    for(Car car : cars.getCars()){
                        if(car.getCity().equals(txtSearch.getText())){
                            System.out.println(txtSearch.getText());
                            Object[] list = new Object[8];
                            list[0] = car;
                            list[1] = car.getBrand();
                            list[2] = car.getModel();
                            list[3] = car.getYearOfManufacture();
                            list[4] = car.getNumberOfSeats();
                            list[5] = car.getAvailability();
                            list[6] = car.getCity();
                            list[7] = car.getMaintenanceExpiry();

                            search.addRow(list);
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Not found");
                        }

                    }
                }
            break;

        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSearchMouseClicked
        // TODO add your handling code here:    
    }//GEN-LAST:event_txtSearchMouseClicked

    private void btnFirstAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstAvailableActionPerformed
        // TODO add your handling code here:
        
        search = (DefaultTableModel) tableSearch.getModel();
        search.setRowCount(0);
        
        for(Car car : cars.getCars()){
            if(car.getAvailability().equals("Yes")){
                
                Object[] list = new Object[8];
                    list[0] = car;
                    list[1] = car.getBrand();
                    list[2] = car.getModel();
                    list[3] = car.getYearOfManufacture();
                    list[4] = car.getNumberOfSeats();
                    list[5] = car.getAvailability();
                    list[6] = car.getCity();
                    list[7] = car.getMaintenanceExpiry();

                search.addRow(list);
                break;

            }
        }
        
    }//GEN-LAST:event_btnFirstAvailableActionPerformed

    private void btnMinSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinSeatsActionPerformed
        // TODO add your handling code here:
        
        search = (DefaultTableModel) tableSearch.getModel();
        search.setRowCount(0);
        ArrayList<Integer> array = new ArrayList<Integer>();
        
        for(Car car : cars.getCars()){
            array.add(car.getNumberOfSeats());
            
        }
        Collections.sort(array);
        int min = array.get(0);
        for(Car car : cars.getCars()){
            if(car.getNumberOfSeats() == min){
                    Object[] list = new Object[8];
                    list[0] = car;
                    list[1] = car.getBrand();
                    list[2] = car.getModel();
                    list[3] = car.getYearOfManufacture();
                    list[4] = car.getNumberOfSeats();
                    list[5] = car.getAvailability();
                    list[6] = car.getCity();
                    list[7] = car.getMaintenanceExpiry();

                    search.addRow(list);
            }
        }

    }//GEN-LAST:event_btnMinSeatsActionPerformed

    private void btnAvailNotAvailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAvailNotAvailActionPerformed
        // TODO add your handling code here:
        search = (DefaultTableModel) tableSearch.getModel();
        search.setRowCount(0);
        int i=0, j=0;
        
        for (Car car : cars.getCars()){
            if(car.getAvailability().equals("Yes")){
                i++;
            }
            else{
                j++;
            }
        }
        JOptionPane.showMessageDialog(null, "Available Cars: "+i+"\nNot Available Cars: "+j);
    }//GEN-LAST:event_btnAvailNotAvailActionPerformed

    private void btnRecentUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecentUpdateActionPerformed
        // TODO add your handling code here:
        search = (DefaultTableModel) tableSearch.getModel();
        search.setRowCount(0);
        ArrayList<Date> array = new ArrayList<Date>();
        
        for(Car car : cars.getCars()){
            array.add(car.getDate());
            
        }
            Collections.sort(array);
            Collections.reverse(array);
            Date max = array.get(0);
        
        for(Car car : cars.getCars()){
            if(car.getDate().compareTo(max) == 0){
                Object[] list = new Object[8];
                    list[0] = car;
                    list[1] = car.getBrand();
                    list[2] = car.getModel();
                    list[3] = car.getYearOfManufacture();
                    list[4] = car.getNumberOfSeats();
                    list[5] = car.getAvailability();
                    list[6] = car.getCity();
                    list[7] = car.getMaintenanceExpiry();

                search.addRow(list);
                break;
            } 
        }

    }//GEN-LAST:event_btnRecentUpdateActionPerformed

    private void comboSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSearchActionPerformed
        // TODO add your handling code here:
        selectedItem = (String) comboSearch.getSelectedItem();
    }//GEN-LAST:event_comboSearchActionPerformed

    private void btnExpiryCarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpiryCarsActionPerformed
        // TODO add your handling code here:
        search = (DefaultTableModel) tableSearch.getModel();
        search.setRowCount(0);
        
        LocalDate date = LocalDate.now();
        Date today = Date.from(date.atStartOfDay(ZoneId.systemDefault()).toInstant());
        System.out.println(today);
        
        for(Car car : cars.getCars()){
            System.out.println("inside for");
            if(car.getMaintenanceExpiry().before(today)){
                System.out.println("inside if");
                Object[] list = new Object[8];
                    list[0] = car;
                    list[1] = car.getBrand();
                    list[2] = car.getModel();
                    list[3] = car.getYearOfManufacture();
                    list[4] = car.getNumberOfSeats();
                    list[5] = car.getAvailability();
                    list[6] = car.getCity();
                    list[7] = car.getMaintenanceExpiry();

                search.addRow(list);
            } 
        }

    }//GEN-LAST:event_btnExpiryCarsActionPerformed

    private void txtSerialNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSerialNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSerialNumberActionPerformed

    private void btnSeatsLessMoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeatsLessMoreActionPerformed
        // TODO add your handling code here:
        search = (DefaultTableModel) tableSearch.getModel();
        search.setRowCount(0);
        ArrayList<Integer> array = new ArrayList<Integer>();
        
        for(Car car : cars.getCars()){
            if(car.getNumberOfSeats() >= 4 && car.getNumberOfSeats() < 8){
                    Object[] list = new Object[8];
                    list[0] = car;
                    list[1] = car.getBrand();
                    list[2] = car.getModel();
                    list[3] = car.getYearOfManufacture();
                    list[4] = car.getNumberOfSeats();
                    list[5] = car.getAvailability();
                    list[6] = car.getCity();
                    list[7] = car.getMaintenanceExpiry();

                    search.addRow(list);
            }
        }
    }//GEN-LAST:event_btnSeatsLessMoreActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton RadioNo;
    private javax.swing.JRadioButton RadioYes;
    private javax.swing.JButton btnAvailNotAvail;
    private javax.swing.JButton btnExpiryCars;
    private javax.swing.JButton btnFirstAvailable;
    private javax.swing.JButton btnMinSeats;
    private javax.swing.JButton btnRecentUpdate;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSeatsLessMore;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox<String> comboSearch;
    private com.toedter.calendar.JDateChooser dateDateSaved;
    private com.toedter.calendar.JDateChooser dateExpiry;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAvailability;
    private javax.swing.JLabel lblBrand;
    private javax.swing.JLabel lblCertificate;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblModel;
    private javax.swing.JLabel lblSeats;
    private javax.swing.JLabel lblSerialNumber;
    private javax.swing.JLabel lblYear;
    private javax.swing.JTable tablePopulate;
    private javax.swing.JTable tableSearch;
    private javax.swing.JTextField txtBrand;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtModel;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSeats;
    private javax.swing.JTextField txtSerialNumber;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables

    private void displayCars() {
        
        DefaultTableModel model = (DefaultTableModel) tablePopulate.getModel();
        model.setRowCount(0);
        
        for(Car car : cars.getCars()){
            
            Object[] list = new Object[8];
            list[0] = car;
            list[1] = car.getBrand();
            list[2] = car.getModel();
            list[3] = car.getYearOfManufacture();
            list[4] = car.getNumberOfSeats();
            list[5] = car.getAvailability();
            list[6] = car.getCity();
            list[7] = car.getMaintenanceExpiry();
            
            model.addRow(list);
            
        }
    
    }
    
   private void searchTable(String searchString){
       
       modelTable = (DefaultTableModel) tablePopulate.getModel();
       DefaultTableModel searchTable = (DefaultTableModel) tableSearch.getModel();
       searchTable.setRowCount(0);
       
       
              
   }
    
}
